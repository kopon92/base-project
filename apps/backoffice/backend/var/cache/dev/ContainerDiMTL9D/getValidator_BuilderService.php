<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'validator.builder' shared service.

include_once \dirname(__DIR__, 7).'/vendor/symfony/validator/ValidatorBuilder.php';
include_once \dirname(__DIR__, 7).'/vendor/symfony/validator/Validation.php';
include_once \dirname(__DIR__, 7).'/vendor/symfony/validator/ConstraintValidatorFactoryInterface.php';
include_once \dirname(__DIR__, 7).'/vendor/symfony/validator/ContainerConstraintValidatorFactory.php';
include_once \dirname(__DIR__, 7).'/vendor/symfony/validator/Mapping/Loader/LoaderInterface.php';
include_once \dirname(__DIR__, 7).'/vendor/symfony/validator/Mapping/Loader/AutoMappingTrait.php';
include_once \dirname(__DIR__, 7).'/vendor/symfony/validator/Mapping/Loader/PropertyInfoLoader.php';

$this->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

$a = ($this->privates['property_info'] ?? $this->load('getPropertyInfoService.php'));

$instance->setConstraintValidatorFactory(new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
    'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService.php', true],
    'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService.php', true],
    'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService.php', true],
    'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService.php', true],
], [
    'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
    'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
    'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
    'validator.expression' => '?',
])));
if ($this->has('translator')) {
    $instance->setTranslator(($this->services['translator'] ?? $this->load('getTranslatorService.php')));
}
$instance->setTranslationDomain('validators');
$instance->addXmlMappings([0 => (\dirname(__DIR__, 7).'/vendor/symfony/form/Resources/config/validation.xml')]);
$instance->enableAnnotationMapping(($this->privates['annotations.cached_reader'] ?? $this->load('getAnnotations_CachedReaderService.php')));
$instance->addMethodMapping('loadValidatorMetadata');
$instance->addObjectInitializers([]);
$instance->addLoader(new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL));

return $instance;
